syntax = "proto3";
package myservice;
option go_package = "pbfile/";

import "annotations.proto";

message Message{
  string id = 1;
  int64 num = 2;
  string language = 3;
}

message SimpleMessage{
  string id = 1;
  int64 num = 2;
  string language = 3;
  InnerMsg msg = 4;

}

message InnerMsg{
  string f1 = 1;
  string f2 = 2;
}

//  yaml里的 selector 也就是原来网关的默认地址: package的名字 + service的名字 + rpc函数的名字
//  或者也可以去 .pb.gw.go 的文件中看

service MyService{
  rpc Echo(Message) returns (Message);
//    option (google.api.http) = {
//      post: "/v1/echo/{id}"
//      additional_bindings {
//        get: "/v1/echo/{id}"
//      }
//      additional_bindings {
//        get: "/v1/echo/{id}/{num}"
//      }
//    };


  rpc EchoSimple(SimpleMessage) returns (SimpleMessage){
//    option (google.api.http) = {
//      post: "/v1/echo/simple"
//      body: "*"
//      additional_bindings {
//        put: "/v1/echo/simple"
//        body: "msg"
//      }
//    };
  }

}



//protoc --proto_path=. --go_out=. --go-grpc_out=. .\myservice.proto

// -- gateway --
// protoc --proto_path=myservice/myservice --grpc-gateway_out=myservice/myservice/pbfile --grpc-gateway_opt=logtostderr=true --grpc-gateway_opt=paths=source_relative --grpc-gateway_opt=generate_unbound_methods=true myservice/myservice/myservice.proto

// -- rpc --
// protoc --proto_path=myservice/myservice --go_out=myservice/myservice/pbfile --go_opt=paths=source_relative --go-grpc_out=myservice/myservice/pbfile --go-grpc_opt=paths=source_relative myservice/myservice/myservice.proto